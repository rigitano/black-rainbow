{
"infrastructure": {

    "echo hello world !": {
      "ok_button": "clipboard_hello_world"
    },
    "os info": {
      "ok_button": "clipboard_os_info"
    },
    "cpu info": {
        "ok_button": "clipboard_cpu_info"
    },
    "available ram": {
      "ok_button": "clipboard_avalable_ram"
  },
    "filesystems and disk space": {
      "ok_button": "clipboard_filesystems_and_disk_space"
    },
    "folders and disk space": {
      "ok_button": "clipboard_folders_and_disk_space"
    },
    "ip and mac": {
      "ok_button": "clipboard_ip_and_mac"
    }



},


"execution": {


"make executable": {
  "droplist": ["choose...",
                 "shebang - interpreter will be bash",
                 "shebang - interpreter will be python",
                 "chmod - make executable",
                 "export - add folder to PATH to call it directly"], 
  "ok_button": "clipboard_make_executable"
},

"see content of the path variable": {
  "ok_button": "clipboard_see_content_of_path_variable"
},


"execute file": {
  "droplist": ["choose...",
                 "------local------",
                 "bash (./)", 
                 "nextflow (nextflow run)", 
                 "docker (docker run -d)",
                 "------cluster------",
                 "slurm (sbatch)",
                 "torque (qsub)",
                 "moab on top of torque (msub)",
                 "kubernetes (kubectl apply -f)",
                 "yarn-hadoop (yarn jar)",
                 "spark on top of yarn-hadoop (spark-submit --master yarn)"],
  "ok_button": "clipboard_execute"
},

"whats being executed": {
  "droplist": ["choose...",
                "------local------",
                "bash (top)", 
                "nextflow (nextflow log)", 
                "docker (docker ps)",
                "------cluster------",
                "slurm (squeue)",
                "torque (qstat)",
                "moab on top of torque (showq)",
                "kubernetes (kubectl get pods)",
                "yarn-hadoop (yarn application -list)",
                "spark on top of yarn-hadoop (use UI!)"],
  "ok_button": "clipboard_see_running_processes"
},

"cancel execution": {

  "droplist": ["choose...",
                "------local------",
                "bash (kill)", 
                "nextflow (nextflow kill)", 
                "docker (docker stop)",
                "------cluster------",
                "slurm (scancel)",
                "torque (qdel)",
                "moab on top of torque (mjobctl -c)",
                "kubernetes (kubectl delet pod)",
                "yarn-hadoop (yarn application -kill)",
                "spark on top of yarn-hadoop (yarn application -kill)"],

  "ok_button": "clipboard_cancel_execution"
}

},


"coding environment": {

    "python location": {
      "ok_button": "clipboard_python_location"
    },
    "modules location": {
      "ok_button": "clipboard_modules_location"
    },

    "see all conda environments": {
      "ok_button": "clipboard_see_all_conda_environments"
    },
    "create conda environment": {
      "inputbox1": "environment name",
      "inputbox2": "python version",
      "ok_button": "clipboard_create_conda_environment"
    }
},


"GIT": {
    "keygen": {
      "radiobutton1": "see",
      "radiobutton2": "generate",
      "droplist": ["Ed25519 (modern)",
                   "RSA (older systems)"],
      "ok_button": "clipboard_keygen"
    },
    "init or clone": {
      "radiobutton1": "init (project started localy)",
      "plaintext1": "action required: go to github and create a new repository with the same name as the project folder ",

      "radiobutton2": "clone (project started at github)",
      "plaintext3": "action required: go to github and get the link",
      "inputbox1": "link",

      "ok_button": "clipboard_init_or_clone"
    },

    "pull": {
        "ok_button": "clipboard_pull"
      },
      "add, commit": {
        "inputbox1": "commit message",
        "ok_button": "clipboard_add_commit"
      },
      "add, commit (to new branch, so I can explore a crazy idea)": {
        "inputbox1": "insert the new branch name",
        "inputbox2": "commit message",
        "ok_button": "clipboard_add_commit_new_branch"
      },
      "push": {
        "ok_button": "clipboard_push"
      },
      "go back to a previous commit": {
        "inputbox1": "go back to this commit",
        "radiobutton1": "reset --hard (DANGER: all posterior changes and commits will be deleted!)",
        "radiobutton2": "revert (posterior commits will be kept, a new commit will be created with the same code as the chosen commit)",

        "ok_button": "clipboard_go_back"
      },
      "stash": {
        "inputbox1": "stash message",
        "ok_button": "clipboard_stash"
      },
      "see all branches": {

        "ok_button": "clipboard_see_all_branches"
      },
      "change branch": {
        "inputbox1": "destination branch",
        "plaintext1": "ATTENTION: its mandatory to commit or stash all changes before changing branch",
        "ok_button": "clipboard_change_branch"
      },
      "merge": {
        "inputbox1": "sorce branch with extra code",
        "inputbox2": "destination branch, with the production code to be updated",
        "ok_button": "clipboard_merge"
      }
},


"filesystem": {

    "ls enhanced": {
      "ok_button": "clipboard_list_enhanced"
    },
    "search for file": {
        "plaintext": "where is the text to be searched?",
        "radiobutton1": "in the file name",
        "radiobutton2": "entire path+name",
        "radiobutton3": "in the file content",
        "inputbox1": "search this text",
      "ok_button": "clipboard_search_filesystem",
      "plaintext2": ". (any character)",
      "plaintext3": "[abc] (a, b or c)",
      "plaintext4": "[a-zA-Z] (a to z)",
      "plaintext5": "[a-zA-Z0-9] (all alphanumeric)",
      "plaintext6": "   ",
      "plaintext7": "^ (start of line)",
      "plaintext8": "$ (end of line)",
      "plaintext9": "   ",
      "plaintext11": "* (0-infinite of the preceding)",
      "plaintext12": "+ (1-infinite of the preceding)",
      "plaintext13": "{n} (exactly n of the preceding)",
      "plaintext14": "{n,m} (between n and m of the preceding)",
      "plaintext15": "{n,} (n-infinite of the preceding)"
    },

    "extraction": {
      "plaintext1": "folder extension:",
      "radiobutton0": ".tar",
      "radiobutton1": ".tar.gz",
      "radiobutton2": ".tar.bz2",
      "radiobutton3": ".tar.xz",
      "plaintext2": "file extension:",
      "radiobutton4": ".gz",
      "radiobutton5": ".bz2",
      "radiobutton6": ".xz",
      "inputbox1": "file name. ex: proteins.tar.gz",
      "ok_button": "clipboard_extraction"

    }

},


"text": {

    "find (grep)": {
      
      "inputbox1": "word to be found. ex: henrique",
      "inputbox2": "file to be searched. ex: file.txt",
      "ok_button": "clipboard_find"


    },

    "replace (sed)": {

      
      "inputbox1": "old value",
      "inputbox2": "new value",
      "inputbox3": "file to be modified. ex: file.txt",
      "inputbox4": "new file name. ex: newfile.txt",

      "ok_button": "clipboard_replace"

    }
},


"table (bash)": {



    "filter table": {
      "inputbox1": "value to be found. ex: CA",
      "inputbox2": "file to be filtered. ex: ffbonded.itp",
      "inputbox3": "column id. ex: 1 (for column A)",
      "plaintext1": "ps1: if the separator is some character instead of spaces or tabs, add the -F flag. ex: -F';'",
      "plaintext2": "ps2: to filter by multiple columns or multiple values, use the -e flag. ex: -e 'column1 == value1' -e 'column2 == value2'",
      "ok_button": "clipboard_fiter_table_bash"
    },
    "sort table": {
      "inputbox1": "file with table to be sorted. ex: file.csv",
      "inputbox2": "column id. ex: 1 (for column A)",
      "plaintext": "ps: if the separator is some character instead of spaces or tabs, add the -t flag. ex: -t;",
      "ok_button": "clipboard_sort_table_bash"
    },
    "unique lines": {
      "inputbox1": "file with table",
      "plaintext": "ps: if the separator is some character instead of spaces or tabs, add the -t flag. ex: -t;",
      "ok_button": "clipboard_unique_lines_bash"
    }




},


"table (python)": {


    "filter table": {
      "plaintext": "df.query('column1 == value1 and column2 == value2')",
      "ok_button": "xxxxx"
    },

    "sort table": {
      "plaintext": "df.sort_values(by='column1', ascending=True, inplace=True)",
      "ok_button": "xxxxx"
    },
    "unique lines": {
      "plaintext": "df['column1'].unique()",
      "ok_button": "xxxxx"
    },
    "groupby": {
      "plaintext": "df.groupby('column').agg({'another_column': 'sum'})",
      "ok_button": "xxxxx"
    },
    "merge": {
      "plaintext": "pd.merge(df1, df2, left_on='column1', right_on='column2')",
      "ok_button": "xxxxx"
    },
    "concat": {
      "plaintext": "pd.concat([df1, df2], ignore_index=True)",
      "ok_button": "xxxxx"
    },
    "map": {
      "plaintext": "df.map{'hi':'oi','bye':'tchau'}",
      "ok_button": "xxxxx"
    },
    "apply": {
      "plaintext": "df.apply(lambda x: x + 1)",
      "ok_button": "xxxxx"
    },

    "describe": {
      "plaintext": "df.describe()",
      "ok_button": "xxxxx"
    },
    "fillna": {
      "plaintext": "df.fillna(0, inplace=True)",
      "ok_button": "xxxxx"
    },
    "change type": {
      "plaintext": "df['col'].astype(int)",
      "plaintext2": "int float str bool 'category'",
      "ok_button": "xxxxx"
    }



},


"ML":{


  "Prepair": {
    "radiobutton1": "Dummization",
    "radiobutton2": "Normalization",
    "radiobutton3": "Feature selection",
      "ok_button": "xxxx"
  },

  "Train test split": {
    "radiobutton1": "xxxx",
    "radiobutton2": "xxxx",
      "ok_button": "xxxx"
  },

  "Fit model": {
    "radiobutton1": "XGBoost",
    "radiobutton6": "Decision Tree",
    "radiobutton7": "Naive Bayes",
    "radiobutton8": "Neural Network",
    "radiobutton9": "Linear Regression",
      "ok_button": "xxxx"
  },

  "Evaluate": {
    "radiobutton1": "cross validation",
    "radiobutton2": "confusion matrix",
    "radiobutton3": "classification report",
    "radiobutton4": "ROC AUC",
    "radiobutton5": "feature importance",
      "ok_button": "xxxx"
  }


},


"Statistical tests":{


  "Difference between groups": {
    "radiobutton1": "t-test",
    "radiobutton2": "ANOVA",
    "radiobutton3": "Kruskal-Wallis",
    "radiobutton4": "Mann-Whitney",
    "radiobutton5": "Wilcoxon",
    "radiobutton6": "Chi-square",
    "radiobutton7": "Fisher's exact test",
    "radiobutton8": "Cohen's d",
    "radiobutton9": "Hedges' g",
    "radiobutton10": "Cliff's delta",
    "radiobutton11": "Cramér's V",
    "radiobutton12": "Phi coefficient",
    "radiobutton13": "Kendall's tau",
    "radiobutton14": "Spearman's rank correlation",
    "radiobutton15": "Pearson's correlation",
    "radiobutton16": "Point-biserial correlation",

      "ok_button": "xxxx"
  },

  "Correlation": {
    "radiobutton1": "Pearson",
    "radiobutton2": "Spearman",
    "radiobutton3": "Kendall",
    "radiobutton4": "Point-biserial",

      "ok_button": "xxxx"
  }




},


"construct molecules": {

    "download and clean pdb": {
      "ok_button": "xxxxx"
    },
    "create peptide": {
      "ok_button": "xxxxx"
    },
    "create truss": {
        "ok_button": "xxxxx"
    },
    "create tape": {
        "ok_button": "xxxxx"
    },
    "create sphere": {
        "ok_button": "xxxxx"
    },
    "create tube": {
        "ok_button": "xxxxx"
    },
    "delete region": {
        "ok_button": "xxxxx"
    }
},


"construct system": {

    "molecule in solvent box": {
      "ok_button": "xxxxx"
    },
    "molecule in membrane": {
      "ok_button": "xxxxx"
    },
    "fill box with the same molecule": {
        "ok_button": "xxxxx"
      }


},


"restrict system": {
    "positions": {
        "droplist": ["harmonic potential - [position_restraints] type 1",
                     "flat bottom potential - [position_restraints] type 2"],
        "ok_button": "xxxxx"
      },
    "dihedrals": {
      "plaintext1": "potential similar to improper dihedral - [ dihedral_restraints ] type 1",
      "plaintext2": "action required on mdp: dihre=yes dihre_fc=1000",
      "radiobutton1": "all",
      "radiobutton2": "just phi and psi of protein",
      "ok_button": "xxxxx"
    },
    "angles": {
        "plaintext1": "potential similar to proper dihedral - [ angle_restraints ] type 1",
        "ok_button": "xxxxx"
      },
    "distances": {

        "radiobutton1": "potential",
        "droplist1": ["harmonic potential - [bonds] type 6",
                     "flat bottom potential - [bonds] type 10"],
        "plaintext1": "action required on mdp: disre=simple disre_fc=1000", 

        "radiobutton2": "rigid by algorithic renforcement",
        "droplist2": ["apply exclusions - [constraints] type 1",
                      "no exclusions - [constraints] type 2"],
        "plaintext2": "action required on mdp: constraint_algorithm=lincs",
                     
        "ok_button": "xxxxx"
      }
  

},


"inspect system": {
    "get global id of atom": {
        "ok_button": "xxxxx"
    },
    "molecules basic info": {
        "ok_button": "xxxxx"
    },
    "parse directive": {
        "ok_button": "xxxxx"
    },
    "parse molecules": {
        "ok_button": "xxxxx"
    },
    "include all itps into a single top": {
        "ok_button": "xxxxx"
    },
    "decompose molecules into separate itps": {
        "ok_button": "xxxxx"
    }

},

"run": {
    "make realistic": {
        "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque)"],

        "inputbox1": "gro. ex: 'hemoglobin_in_water.gro'",
        "inputbox2": "top. ex: 'hemoglobin_in_water.top'",
        "inputbox3": "groups to monitor. ex: 'Protein Non-Protein' or 'System'",
        "ok_button": "clipboard_make_realistic"
        
      },

    "benchmark": {
            "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque) *"],
        "inputbox1": "tpr file. ex: 'prod.tpr'",
        "ok_button": "xxxxx"
      },

    "runPROD": {
      "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque)"],

      "inputbox1": "gro. ex: 'hemoglobin_in_water.gro'",
      "inputbox2": "top. ex: 'hemoglobin_in_water.top'",
      "inputbox3": "duration (ns)",
      "inputbox4": "groups to monitor. ex: 'Protein Non-Protein' or 'System'",
      "ok_button": "clipboard_run_prod"
    },

    "runFEPoff": {
      "droplist": ["local *",
                   "oxygen (torque) *",
                   "rome (moab on top of torque)"],
      "inputbox0": "cpr",
      "inputbox1": "out folder name. ex: '4_FEPoff'",
      "inputbox2": "gro file",
      "inputbox3": "top file",
      "inputbox4": "duration (ns)",
      "inputbox5": "groups to monitor. ex: 'Protein Non-Protein' or 'System'",
      "inputbox6": "MOLECULE TO TURN OFF. ex: 'Protein'",
      "ok_button": "xxxxx"
    },

    "runFEPswitch": {
      "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque)"],
      "inputbox0": "cpr",
      "inputbox1": "out folder name",
      "inputbox2": "gro file WITH EXTRA COLUMNS",
      "inputbox3": "top file",
      "inputbox4": "duration (ns)",
      "ok_button": "xxxxx"
    },

    "runSTEERED": {
      "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque)"],
                   "radiobutton1": "target mol pulled from anchor mol",
                   "radiobutton2": "target mol pulled using a magic force",
      "ok_button": "xxxxx"
    },

    "runUMBRELLAS": {
      "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque)"],
      "ok_button": "xxxxx"
    },

    "mdrun_all_tprs": {
      "droplist": ["local",
                   "oxygen (torque)",
                   "rome (moab on top of torque) *"],

      "radiobutton1": "paralelize in a simple way",
      "inputbox1": "-nt. ex: 8 ",
      "radiobutton2": "paralelize via openMP and MPI",
      "inputbox2": "openMP (-ntomp or OMP_NUM_THREADS=). ex: 1 ",
      "inputbox3": "MPI (-ntmpi or #MSUB -n). ex: 16",
      "radiobutton3": "paralelize via domain decomposition",
      "inputbox4": "-dd. ex: 3 3 3",
      "inputbox5": "-npme. ex: 1",
      "inputbox6": "-dlb. ex: yes",
      "ok_button": "xxxxx"
    }


},


"analysis over timeline": {

    "Ramachandran": {
      "ok_button": "xxxxx"
    },
    "DSSP": {
      "ok_button": "xxxxx"
    },
    "H bonds": {
        "ok_button": "xxxxx"
      },
    "Distance between 2 atoms": {
      "ok_button": "xxxxx"
    },
    "phi and psi": {
      "ok_button": "xxxxx"
    },
    "RMSD from reference": {
      "ok_button": "xxxxx"
    },
    "Gyration radius": {
      "ok_button": "xxxxx"
    },
    "SASA": {
      "ok_button": "xxxxx"
    },
    "Quadrupole": {
      "ok_button": "xxxxx"
    }

},

"analysis over delta E": {
    "check convergence": {
        "ok_button": "xxxxx"
    },
    "whats the delta E": {
      "ok_button": "xxxxx"
    },
    "draw termodinamic cycle": {
      "inputbox1": "molecule to vanish",
      "ok_button": "xxxxx"
    }

},

"vmd visualisation": {

    "LAUNCH VMD WITH SOCKET": {
      "ok_button": "xxxxx"
    },
    "Cartoon with licorice": {
      "ok_button": "xxxxx"
    },
    "Goodsell": {
      "ok_button": "xxxxx"
    },
    "Secondary Structure": {
      "ok_button": "xxxxx"
    },
    "Elostatic potential": {
      "ok_button": "xxxxx"
    },
    "Hydrophilic x Hydrophobic": {
      "ok_button": "xxxxx"
    },
    "H bonds near protein": {
      "ok_button": "xxxxx"
    },
    "Gromacs Topology": {
      "ok_button": "xxxxx"
    },
    "Forces": {
      "ok_button": "xxxxx"
    },
    "Specific id": {
      "ok_button": "xxxxx"
    }

},


"QC of reads": {

    "fastqc": {
      "inputbox1": "xxxxx",
      "ok_button": "xxxxx"
    }
},


"alignment": {
    "Blast": {
        "plaintext":"search of 1 query into large database",
        "ok_button": "xxxxx"
    },
    "Muscle": {
      "plaintext":"simultaneous comparisson of multiple strings. e.g. hemogobin of all animals",
      "ok_button": "xxxxx"
    },
    "Bowtie2": {
      "plaintext":"mapping of DNA reads into DNA. e.g. new individual or chipseq",
      "ok_button": "xxxxx"
    },
    "Hisat2": {
        "plaintext":"mapping of *RNA* reads into DNA",
        "ok_button": "xxxxx"
      }
},


"mapped DNA analysis (new individual)": {
    "Picard - remove PCR replicas": {
        "ok_button": "xxxxx"
    },
    "Picard - correct and sort pairs": {
        "ok_button": "xxxxx"
    },
    "Picard - add group info": {
        "ok_button": "xxxxx"
    },
    "Picard - index BAM": {
        "ok_button": "xxxxx"
    },
    "GATK - create dictionary": {
        "ok_button": "xxxxx"
    },
    "GATK - variant calling": {
        "ok_button": "xxxxx"
    },
    "BCF Tools - filter variants of my interest": {
        "ok_button": "xxxxx"
    }
},


"mapped DNA analysis (chipseq)": {
    "Macs2 callpeak": {
       "plaintext":"fing points of atachment of protein in DNA",
        "ok_button": "xxxxx"
    },
    "Generate motif": {
        "ok_button": "xxxxx"
    }
},


"mapped *RNA* analysis": {
    "FeatureCounts": {
        "plaintext":"generate read table per gene",
        "ok_button": "xxxxx"
    },
    "Desec2": {
        "plaintext":"find differential expression of genes",
        "ok_button": "xxxxx"
    }
},


"SC analysis": {
  "Load data": {
    "radiobutton1": "one sample",
    "radiobutton2": "several samples",
      "ok_button": "xxxxx"
  },
    "Cell and gene QC": {
      "radiobutton1": "plot count x genes",
      "radiobutton2": "plot mitocondrial violin",
        "radiobutton3": "filters",
        "ok_button": "xxxxx"
    },
    "Normalization": {
      "plaintext1":"DIVIDE PER TOTAL",
      "radiobutton1": "counts",
      "radiobutton2": "genes",
      "radiobutton3": "xxxxx",
      "plaintext2":"NON LINEAR TRANSFORM",
      "radiobutton4": "log",
      "radiobutton5": "sqrt",
      "radiobutton6": "pearson residuals",
      "ok_button": "xxxxx"
    },
    "Dimentionality reduction": {
      "radiobutton1": "PCA;UMAP;t-SNE",
      "ok_button": "xxxxx"
    },
    "Clusterization": {
      "radiobutton1": "leiden <- best",
      "radiobutton2": "louvain",
      "radiobutton3": "plot",
      "radiobutton4": "plot by sample",
        "ok_button": "xxxxx"
    },
    "Calculate marker": {
      "radiobutton1": "sc.tl.rank_genes_groups",
      "radiobutton2": "deseq2",
      "radiobutton3": "plot importance",
      "radiobutton4": "plot volcanos",
      "radiobutton5": "plot dots",
      "ok_button": "xxxxx"
    },
    "Enrichment": {
      "radiobutton1": "go biological process",
      "radiobutton2": "kegg",
      "radiobutton3": "plot bars",
    "ok_button": "xxxxx"
    },
    "Insert external markers": {
      "radiobutton1": "load data",
      "radiobutton3": "plot external markers",
    "ok_button": "xxxxx"
    },

    "Trajectory": {
        "ok_button": "xxxxx"
    },
    "Velocity": {
        "ok_button": "xxxxx"
    },
    "GRN inference": {
      "ok_button": "xxxxx"
      }
}

  }

